if filereadable(expand('$HOME/dotfiles/vim/vimrc.neobundle'))
    source $HOME/dotfiles/vim/vimrc.neobundle
    if filereadable(expand('$HOME/dotfiles/vim/vimrc.neobundle.conf'))
        source $HOME/dotfiles/vim/vimrc.neobundle.conf
    endif
endif

if filereadable(expand('$HOME/dotfiles/vimrc.filetype'))
    source $HOME/dotfiles/vimrc.filetype
endif

if filereadable(expand('$HOME/dotfiles/vimrc.office'))
    source $HOME/dotfiles/vimrc.office
endif

"互換性モードオフ
set nocompatible

"画面関係の設定
set number "行番号を表示
set cursorline "カーソル行の背景色を変更
set showmatch "カーソル位置の対応したカッコを強調表
set background=light
colorscheme solarized

"カーソル系
set backspace=indent,eol,start "backspaceの影響範囲に制限を設けない

"ファイル系
set confirm "保存されてないファイルがあるときにvimを終了させようとした時に保存の確認を行う
set nobackup "バックアップファイル作らない
set noswapfile "スワップファイル作らない
set hidden

"検索系
set hlsearch "検索文字をハイライト
set incsearch "インクリメンタルサーチ
set ignorecase "大文字小文字を区別しない
set smartcase "大文字小文字が混在して検索した場合、それぞれ区別する
set wrapscan "最後尾まで検索を終えたら、次の検索で先頭に移る
set gdefault "置換の際に g オプションをデフォルトで有効にする

set visualbell "ビープ音をすべて視覚表示にする
set wildmenu "コマンドラインモードでtabでファイル名補完
set wildmode=list:longest,full
set history=100000 "コマンドライン履歴を100000件保存する

set clipboard=unnamed,unnamedplus "osのクリップボードを使用
set mouse=a "マウス入力ok
set shellslash "windowsでもパスの区切りを/にする

set expandtab "タブ入力を複数の空白入力にする
set tabstop=4 "画面上でタブ文字を占める幅
set shiftwidth=4 "自動インデントでずれる幅
set softtabstop=4 "空白に対するバックスペースの移動幅
set autoindent "開業時に前の行のインデントを継続する
set smartindent "改行時に入力された行の末尾に合わせて次のインデントを増減
set cindent

"画面分割関連
let mapleader = ','


"キーボード割り当て
map <c-h> <c-w>h
map <c-j> <c-w>j
map <c-k> <c-w>k
map <c-l> <c-w>l
map <leader>l :align
map <leader>b :ctrlpbuffer<cr>
vnoremap < <gv
vnoremap > >gv
nnoremap n nzz
nnoremap n nzz

cnoremap %% <c-r>=expand('%:p:h').'/'<cr>

"ファイルタイプごとの設定
if has("autocmd")
    filetype plugin on
    filetype indent on
   
    autocmd filetype apache     setlocal sw=4 sts=4 ts=4 et
    autocmd FileType aspvbs     setlocal sw=4 sts=4 ts=4 et
    autocmd FileType c          setlocal sw=4 sts=4 ts=4 et
    autocmd FileType cpp        setlocal sw=4 sts=4 ts=4 et
    autocmd FileType cs         setlocal sw=4 sts=4 ts=4 et
    autocmd FileType css        setlocal sw=2 sts=2 ts=2 et
    autocmd FileType diff       setlocal sw=4 sts=4 ts=4 et
    autocmd FileType eruby      setlocal sw=4 sts=4 ts=4 et
    autocmd FileType html       setlocal sw=2 sts=2 ts=2 et
    autocmd FileType java       setlocal sw=4 sts=4 ts=4 et
    autocmd FileType javascript setlocal sw=2 sts=2 ts=2 et
    autocmd FileType perl       setlocal sw=4 sts=4 ts=4 et
    autocmd FileType php        setlocal sw=4 sts=4 ts=4 et
    autocmd FileType python     setlocal sw=4 sts=4 ts=4 et
    autocmd FileType ruby       setlocal sw=2 sts=2 ts=2 et
    autocmd FileType haml       setlocal sw=2 sts=2 ts=2 et
    autocmd FileType sh         setlocal sw=4 sts=4 ts=4 et
    autocmd FileType sql        setlocal sw=4 sts=4 ts=4 et
    autocmd FileType vb         setlocal sw=4 sts=4 ts=4 et
    autocmd FileType vim        setlocal sw=2 sts=2 ts=2 et
    autocmd FileType wsh        setlocal sw=4 sts=4 ts=4 et
    autocmd FileType xhtml      setlocal sw=4 sts=4 ts=4 et
    autocmd FileType xml        setlocal sw=4 sts=4 ts=4 et
    autocmd FileType yaml       setlocal sw=2 sts=2 ts=2 et
    autocmd FileType zsh        setlocal sw=4 sts=4 ts=4 et
    autocmd FileType scala      setlocal sw=2 sts=2 ts=2 et
endif
function! s:RestoreCursorPosition()
    if line("'\"") <= line("$")
        normal! g`"
        return 1
    endif
endfunction

"カーソル位置保存
augroup vimrc_restore_cursor_position
    autocmd!
    autocmd BufWinEnter * call s:RestoreCursorPosition()
augroup END

"アクティブウインドウに限りカーソルを強調
augroup vimrc_set_cursorline_only_active_window
    autocmd!
    autocmd VimEnter,BufWinEnter,WinEnter * setlocal cursorline
    autocmd WinLeave * setlocal nocursorline
augroup END

"インサートモードに入った時にカーソルの色を変更する
augroup vimrc_change_cursorline_color
    autocmd!
augroup END
